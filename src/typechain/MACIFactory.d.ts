/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface MACIFactoryInterface extends ethers.utils.Interface {
  functions: {
    "batchSizes()": FunctionFragment;
    "batchUstVerifier()": FunctionFragment;
    "deployMaci(address,address,address,tuple)": FunctionFragment;
    "maxValues()": FunctionFragment;
    "owner()": FunctionFragment;
    "qvtVerifier()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setMaciParameters(uint8,uint8,uint8,uint8,uint8,address,address,uint256,uint256)": FunctionFragment;
    "signUpDuration()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treeDepths()": FunctionFragment;
    "votingDuration()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "batchSizes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batchUstVerifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployMaci",
    values: [string, string, string, { x: BigNumberish; y: BigNumberish }]
  ): string;
  encodeFunctionData(functionFragment: "maxValues", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "qvtVerifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMaciParameters",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "signUpDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "treeDepths",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votingDuration",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "batchSizes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchUstVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deployMaci", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxValues", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "qvtVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaciParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signUpDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treeDepths", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "votingDuration",
    data: BytesLike
  ): Result;

  events: {
    "MaciDeployed(address)": EventFragment;
    "MaciParametersChanged()": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MaciDeployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaciParametersChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type MaciDeployedEvent = TypedEvent<[string] & { _maci: string }>;

export type MaciParametersChangedEvent = TypedEvent<[] & {}>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class MACIFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MACIFactoryInterface;

  functions: {
    batchSizes(
      overrides?: CallOverrides
    ): Promise<
      [number, number] & { tallyBatchSize: number; messageBatchSize: number }
    >;

    batchUstVerifier(overrides?: CallOverrides): Promise<[string]>;

    deployMaci(
      _signUpGatekeeper: string,
      _initialVoiceCreditProxy: string,
      _coordinator: string,
      _coordinatorPubKey: { x: BigNumberish; y: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    maxValues(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        maxUsers: BigNumber;
        maxMessages: BigNumber;
        maxVoteOptions: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    qvtVerifier(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaciParameters(
      _stateTreeDepth: BigNumberish,
      _messageTreeDepth: BigNumberish,
      _voteOptionTreeDepth: BigNumberish,
      _tallyBatchSize: BigNumberish,
      _messageBatchSize: BigNumberish,
      _batchUstVerifier: string,
      _qvtVerifier: string,
      _signUpDuration: BigNumberish,
      _votingDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    signUpDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    treeDepths(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number] & {
        stateTreeDepth: number;
        messageTreeDepth: number;
        voteOptionTreeDepth: number;
      }
    >;

    votingDuration(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  batchSizes(
    overrides?: CallOverrides
  ): Promise<
    [number, number] & { tallyBatchSize: number; messageBatchSize: number }
  >;

  batchUstVerifier(overrides?: CallOverrides): Promise<string>;

  deployMaci(
    _signUpGatekeeper: string,
    _initialVoiceCreditProxy: string,
    _coordinator: string,
    _coordinatorPubKey: { x: BigNumberish; y: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  maxValues(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      maxUsers: BigNumber;
      maxMessages: BigNumber;
      maxVoteOptions: BigNumber;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  qvtVerifier(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaciParameters(
    _stateTreeDepth: BigNumberish,
    _messageTreeDepth: BigNumberish,
    _voteOptionTreeDepth: BigNumberish,
    _tallyBatchSize: BigNumberish,
    _messageBatchSize: BigNumberish,
    _batchUstVerifier: string,
    _qvtVerifier: string,
    _signUpDuration: BigNumberish,
    _votingDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  signUpDuration(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  treeDepths(
    overrides?: CallOverrides
  ): Promise<
    [number, number, number] & {
      stateTreeDepth: number;
      messageTreeDepth: number;
      voteOptionTreeDepth: number;
    }
  >;

  votingDuration(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    batchSizes(
      overrides?: CallOverrides
    ): Promise<
      [number, number] & { tallyBatchSize: number; messageBatchSize: number }
    >;

    batchUstVerifier(overrides?: CallOverrides): Promise<string>;

    deployMaci(
      _signUpGatekeeper: string,
      _initialVoiceCreditProxy: string,
      _coordinator: string,
      _coordinatorPubKey: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<string>;

    maxValues(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        maxUsers: BigNumber;
        maxMessages: BigNumber;
        maxVoteOptions: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    qvtVerifier(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setMaciParameters(
      _stateTreeDepth: BigNumberish,
      _messageTreeDepth: BigNumberish,
      _voteOptionTreeDepth: BigNumberish,
      _tallyBatchSize: BigNumberish,
      _messageBatchSize: BigNumberish,
      _batchUstVerifier: string,
      _qvtVerifier: string,
      _signUpDuration: BigNumberish,
      _votingDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    signUpDuration(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    treeDepths(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number] & {
        stateTreeDepth: number;
        messageTreeDepth: number;
        voteOptionTreeDepth: number;
      }
    >;

    votingDuration(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "MaciDeployed(address)"(
      _maci?: null
    ): TypedEventFilter<[string], { _maci: string }>;

    MaciDeployed(_maci?: null): TypedEventFilter<[string], { _maci: string }>;

    "MaciParametersChanged()"(): TypedEventFilter<[], {}>;

    MaciParametersChanged(): TypedEventFilter<[], {}>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    batchSizes(overrides?: CallOverrides): Promise<BigNumber>;

    batchUstVerifier(overrides?: CallOverrides): Promise<BigNumber>;

    deployMaci(
      _signUpGatekeeper: string,
      _initialVoiceCreditProxy: string,
      _coordinator: string,
      _coordinatorPubKey: { x: BigNumberish; y: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    maxValues(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    qvtVerifier(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaciParameters(
      _stateTreeDepth: BigNumberish,
      _messageTreeDepth: BigNumberish,
      _voteOptionTreeDepth: BigNumberish,
      _tallyBatchSize: BigNumberish,
      _messageBatchSize: BigNumberish,
      _batchUstVerifier: string,
      _qvtVerifier: string,
      _signUpDuration: BigNumberish,
      _votingDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    signUpDuration(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    treeDepths(overrides?: CallOverrides): Promise<BigNumber>;

    votingDuration(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    batchSizes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    batchUstVerifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deployMaci(
      _signUpGatekeeper: string,
      _initialVoiceCreditProxy: string,
      _coordinator: string,
      _coordinatorPubKey: { x: BigNumberish; y: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    maxValues(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    qvtVerifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaciParameters(
      _stateTreeDepth: BigNumberish,
      _messageTreeDepth: BigNumberish,
      _voteOptionTreeDepth: BigNumberish,
      _tallyBatchSize: BigNumberish,
      _messageBatchSize: BigNumberish,
      _batchUstVerifier: string,
      _qvtVerifier: string,
      _signUpDuration: BigNumberish,
      _votingDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    signUpDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    treeDepths(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    votingDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
