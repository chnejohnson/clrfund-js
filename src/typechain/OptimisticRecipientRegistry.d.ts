/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface OptimisticRecipientRegistryInterface extends ethers.utils.Interface {
  functions: {
    "addRecipient(address,string)": FunctionFragment;
    "baseDeposit()": FunctionFragment;
    "challengePeriodDuration()": FunctionFragment;
    "challengeRequest(bytes32,address)": FunctionFragment;
    "controller()": FunctionFragment;
    "executeRequest(bytes32)": FunctionFragment;
    "getRecipientAddress(uint256,uint256,uint256)": FunctionFragment;
    "getRecipientCount()": FunctionFragment;
    "maxRecipients()": FunctionFragment;
    "owner()": FunctionFragment;
    "removeRecipient(bytes32)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setBaseDeposit(uint256)": FunctionFragment;
    "setChallengePeriodDuration(uint256)": FunctionFragment;
    "setMaxRecipients(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addRecipient",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "baseDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "challengePeriodDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "challengeRequest",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeRequest",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecipientAddress",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecipientCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxRecipients",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeRecipient",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseDeposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setChallengePeriodDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxRecipients",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "challengePeriodDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "challengeRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecipientAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecipientCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxRecipients",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBaseDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setChallengePeriodDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxRecipients",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "RequestResolved(bytes32,uint8,bool,uint256,uint256)": EventFragment;
    "RequestSubmitted(bytes32,uint8,address,string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestResolved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestSubmitted"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type RequestResolvedEvent = TypedEvent<
  [string, number, boolean, BigNumber, BigNumber] & {
    _recipientId: string;
    _type: number;
    _rejected: boolean;
    _recipientIndex: BigNumber;
    _timestamp: BigNumber;
  }
>;

export type RequestSubmittedEvent = TypedEvent<
  [string, number, string, string, BigNumber] & {
    _recipientId: string;
    _type: number;
    _recipient: string;
    _metadata: string;
    _timestamp: BigNumber;
  }
>;

export class OptimisticRecipientRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: OptimisticRecipientRegistryInterface;

  functions: {
    addRecipient(
      _recipient: string,
      _metadata: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    baseDeposit(overrides?: CallOverrides): Promise<[BigNumber]>;

    challengePeriodDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    challengeRequest(
      _recipientId: BytesLike,
      _beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    controller(overrides?: CallOverrides): Promise<[string]>;

    executeRequest(
      _recipientId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRecipientAddress(
      _index: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRecipientCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxRecipients(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeRecipient(
      _recipientId: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBaseDeposit(
      _baseDeposit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setChallengePeriodDuration(
      _challengePeriodDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxRecipients(
      _maxRecipients: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addRecipient(
    _recipient: string,
    _metadata: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  baseDeposit(overrides?: CallOverrides): Promise<BigNumber>;

  challengePeriodDuration(overrides?: CallOverrides): Promise<BigNumber>;

  challengeRequest(
    _recipientId: BytesLike,
    _beneficiary: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  controller(overrides?: CallOverrides): Promise<string>;

  executeRequest(
    _recipientId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRecipientAddress(
    _index: BigNumberish,
    _startTime: BigNumberish,
    _endTime: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRecipientCount(overrides?: CallOverrides): Promise<BigNumber>;

  maxRecipients(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeRecipient(
    _recipientId: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBaseDeposit(
    _baseDeposit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setChallengePeriodDuration(
    _challengePeriodDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxRecipients(
    _maxRecipients: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addRecipient(
      _recipient: string,
      _metadata: string,
      overrides?: CallOverrides
    ): Promise<void>;

    baseDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    challengePeriodDuration(overrides?: CallOverrides): Promise<BigNumber>;

    challengeRequest(
      _recipientId: BytesLike,
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    controller(overrides?: CallOverrides): Promise<string>;

    executeRequest(
      _recipientId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getRecipientAddress(
      _index: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRecipientCount(overrides?: CallOverrides): Promise<BigNumber>;

    maxRecipients(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeRecipient(
      _recipientId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setBaseDeposit(
      _baseDeposit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setChallengePeriodDuration(
      _challengePeriodDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxRecipients(
      _maxRecipients: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "RequestResolved(bytes32,uint8,bool,uint256,uint256)"(
      _recipientId?: BytesLike | null,
      _type?: BigNumberish | null,
      _rejected?: boolean | null,
      _recipientIndex?: null,
      _timestamp?: null
    ): TypedEventFilter<
      [string, number, boolean, BigNumber, BigNumber],
      {
        _recipientId: string;
        _type: number;
        _rejected: boolean;
        _recipientIndex: BigNumber;
        _timestamp: BigNumber;
      }
    >;

    RequestResolved(
      _recipientId?: BytesLike | null,
      _type?: BigNumberish | null,
      _rejected?: boolean | null,
      _recipientIndex?: null,
      _timestamp?: null
    ): TypedEventFilter<
      [string, number, boolean, BigNumber, BigNumber],
      {
        _recipientId: string;
        _type: number;
        _rejected: boolean;
        _recipientIndex: BigNumber;
        _timestamp: BigNumber;
      }
    >;

    "RequestSubmitted(bytes32,uint8,address,string,uint256)"(
      _recipientId?: BytesLike | null,
      _type?: BigNumberish | null,
      _recipient?: null,
      _metadata?: null,
      _timestamp?: null
    ): TypedEventFilter<
      [string, number, string, string, BigNumber],
      {
        _recipientId: string;
        _type: number;
        _recipient: string;
        _metadata: string;
        _timestamp: BigNumber;
      }
    >;

    RequestSubmitted(
      _recipientId?: BytesLike | null,
      _type?: BigNumberish | null,
      _recipient?: null,
      _metadata?: null,
      _timestamp?: null
    ): TypedEventFilter<
      [string, number, string, string, BigNumber],
      {
        _recipientId: string;
        _type: number;
        _recipient: string;
        _metadata: string;
        _timestamp: BigNumber;
      }
    >;
  };

  estimateGas: {
    addRecipient(
      _recipient: string,
      _metadata: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    baseDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    challengePeriodDuration(overrides?: CallOverrides): Promise<BigNumber>;

    challengeRequest(
      _recipientId: BytesLike,
      _beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    executeRequest(
      _recipientId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRecipientAddress(
      _index: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRecipientCount(overrides?: CallOverrides): Promise<BigNumber>;

    maxRecipients(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeRecipient(
      _recipientId: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBaseDeposit(
      _baseDeposit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setChallengePeriodDuration(
      _challengePeriodDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxRecipients(
      _maxRecipients: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addRecipient(
      _recipient: string,
      _metadata: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    baseDeposit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    challengePeriodDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    challengeRequest(
      _recipientId: BytesLike,
      _beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executeRequest(
      _recipientId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRecipientAddress(
      _index: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRecipientCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxRecipients(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeRecipient(
      _recipientId: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBaseDeposit(
      _baseDeposit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setChallengePeriodDuration(
      _challengePeriodDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxRecipients(
      _maxRecipients: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
