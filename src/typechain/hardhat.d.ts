/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "AnyOldERC20Token",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AnyOldERC20Token__factory>;
    getContractFactory(
      name: "FundingRound",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FundingRound__factory>;
    getContractFactory(
      name: "FundingRoundFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FundingRoundFactory__factory>;
    getContractFactory(
      name: "MACIFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MACIFactory__factory>;
    getContractFactory(
      name: "BaseRecipientRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseRecipientRegistry__factory>;
    getContractFactory(
      name: "IKlerosGTCR",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IKlerosGTCR__factory>;
    getContractFactory(
      name: "IRecipientRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRecipientRegistry__factory>;
    getContractFactory(
      name: "KlerosGTCRAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.KlerosGTCRAdapter__factory>;
    getContractFactory(
      name: "KlerosGTCRMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.KlerosGTCRMock__factory>;
    getContractFactory(
      name: "OptimisticRecipientRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OptimisticRecipientRegistry__factory>;
    getContractFactory(
      name: "SimpleRecipientRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SimpleRecipientRegistry__factory>;
    getContractFactory(
      name: "BatchUpdateStateTreeVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BatchUpdateStateTreeVerifier__factory>;
    getContractFactory(
      name: "BatchUpdateStateTreeVerifier32",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BatchUpdateStateTreeVerifier32__factory>;
    getContractFactory(
      name: "BatchUpdateStateTreeVerifierMedium",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BatchUpdateStateTreeVerifierMedium__factory>;
    getContractFactory(
      name: "QuadVoteTallyVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.QuadVoteTallyVerifier__factory>;
    getContractFactory(
      name: "QuadVoteTallyVerifier32",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.QuadVoteTallyVerifier32__factory>;
    getContractFactory(
      name: "QuadVoteTallyVerifierMedium",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.QuadVoteTallyVerifierMedium__factory>;
    getContractFactory(
      name: "BrightIdUserRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BrightIdUserRegistry__factory>;
    getContractFactory(
      name: "IUserRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUserRegistry__factory>;
    getContractFactory(
      name: "SimpleUserRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SimpleUserRegistry__factory>;
    getContractFactory(
      name: "ComputeRoot",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ComputeRoot__factory>;
    getContractFactory(
      name: "DomainObjs",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DomainObjs__factory>;
    getContractFactory(
      name: "SignUpGatekeeper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SignUpGatekeeper__factory>;
    getContractFactory(
      name: "Hasher",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Hasher__factory>;
    getContractFactory(
      name: "IncrementalMerkleTree",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IncrementalMerkleTree__factory>;
    getContractFactory(
      name: "IncrementalQuinTree",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IncrementalQuinTree__factory>;
    getContractFactory(
      name: "InitialVoiceCreditProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InitialVoiceCreditProxy__factory>;
    getContractFactory(
      name: "MACI",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MACI__factory>;
    getContractFactory(
      name: "SnarkVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SnarkVerifier__factory>;
    getContractFactory(
      name: "PoseidonT3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoseidonT3__factory>;
    getContractFactory(
      name: "PoseidonT6",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoseidonT6__factory>;
    getContractFactory(
      name: "VerifyTally",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VerifyTally__factory>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
  }
}
