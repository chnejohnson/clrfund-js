/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface MACIInterface extends ethers.utils.Interface {
  functions: {
    "batchProcessMessage(uint256,tuple[],uint256[8])": FunctionFragment;
    "calcEmptyVoteOptionTreeRoot(uint8)": FunctionFragment;
    "calcSignUpDeadline()": FunctionFragment;
    "calcVotingDeadline()": FunctionFragment;
    "computeEmptyQuinRoot(uint8,uint256)": FunctionFragment;
    "computeEmptyRoot(uint8,uint256)": FunctionFragment;
    "computeMerkleRootFromPath(uint8,uint256,uint256,uint256[][])": FunctionFragment;
    "coordinatorAddress()": FunctionFragment;
    "coordinatorPubKey()": FunctionFragment;
    "coordinatorReset()": FunctionFragment;
    "currentMessageBatchIndex()": FunctionFragment;
    "currentPerVOSpentVoiceCreditsCommitment()": FunctionFragment;
    "currentQvtBatchNum()": FunctionFragment;
    "currentResultsCommitment()": FunctionFragment;
    "currentSpentVoiceCreditsCommitment()": FunctionFragment;
    "emptyVoteOptionTreeRoot()": FunctionFragment;
    "genBatchUstPublicSignals(uint256,tuple[])": FunctionFragment;
    "genQvtPublicSignals(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "getMessageTreeRoot()": FunctionFragment;
    "getStateTreeRoot()": FunctionFragment;
    "hasUnprocessedMessages()": FunctionFragment;
    "hasUntalliedStateLeaves()": FunctionFragment;
    "hash11(uint256[])": FunctionFragment;
    "hash5(uint256[5])": FunctionFragment;
    "hashLeftRight(uint256,uint256)": FunctionFragment;
    "hashMessage(tuple)": FunctionFragment;
    "hashStateLeaf(tuple)": FunctionFragment;
    "hashedBlankStateLeaf()": FunctionFragment;
    "initialVoiceCreditProxy()": FunctionFragment;
    "maxMessages()": FunctionFragment;
    "maxUsers()": FunctionFragment;
    "messageBatchSize()": FunctionFragment;
    "messageTree()": FunctionFragment;
    "messageTreeMaxLeafIndex()": FunctionFragment;
    "numMessages()": FunctionFragment;
    "numSignUps()": FunctionFragment;
    "originalCurrentResultsCommitment()": FunctionFragment;
    "originalSpentVoiceCreditsCommitment()": FunctionFragment;
    "proveVoteTallyBatch(uint256,uint256,uint256,uint256,uint256,uint256[8])": FunctionFragment;
    "publishMessage(tuple,tuple)": FunctionFragment;
    "signUp(tuple,bytes,bytes)": FunctionFragment;
    "signUpDurationSeconds()": FunctionFragment;
    "signUpGatekeeper()": FunctionFragment;
    "signUpTimestamp()": FunctionFragment;
    "stateRoot()": FunctionFragment;
    "stateRootBeforeProcessing()": FunctionFragment;
    "stateTree()": FunctionFragment;
    "tallyBatchSize()": FunctionFragment;
    "totalVotes()": FunctionFragment;
    "treeDepths()": FunctionFragment;
    "unpackProof(uint256[8])": FunctionFragment;
    "verifyPerVOSpentVoiceCredits(uint8,uint256,uint256,uint256[][],uint256)": FunctionFragment;
    "verifySpentVoiceCredits(uint256,uint256)": FunctionFragment;
    "verifyTallyResult(uint8,uint256,uint256,uint256[][],uint256)": FunctionFragment;
    "voteOptionsMaxLeafIndex()": FunctionFragment;
    "votingDurationSeconds()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "batchProcessMessage",
    values: [
      BigNumberish,
      { x: BigNumberish; y: BigNumberish }[],
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calcEmptyVoteOptionTreeRoot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcSignUpDeadline",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calcVotingDeadline",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "computeEmptyQuinRoot",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "computeEmptyRoot",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "computeMerkleRootFromPath",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish[][]]
  ): string;
  encodeFunctionData(
    functionFragment: "coordinatorAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "coordinatorPubKey",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "coordinatorReset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentMessageBatchIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentPerVOSpentVoiceCreditsCommitment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentQvtBatchNum",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentResultsCommitment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentSpentVoiceCreditsCommitment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emptyVoteOptionTreeRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "genBatchUstPublicSignals",
    values: [BigNumberish, { x: BigNumberish; y: BigNumberish }[]]
  ): string;
  encodeFunctionData(
    functionFragment: "genQvtPublicSignals",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getMessageTreeRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStateTreeRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasUnprocessedMessages",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasUntalliedStateLeaves",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hash11",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "hash5",
    values: [
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hashLeftRight",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hashMessage",
    values: [
      {
        iv: BigNumberish;
        data: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hashStateLeaf",
    values: [
      {
        pubKey: { x: BigNumberish; y: BigNumberish };
        voteOptionTreeRoot: BigNumberish;
        voiceCreditBalance: BigNumberish;
        nonce: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hashedBlankStateLeaf",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialVoiceCreditProxy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxMessages",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxUsers", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "messageBatchSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "messageTree",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "messageTreeMaxLeafIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numMessages",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numSignUps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "originalCurrentResultsCommitment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "originalSpentVoiceCreditsCommitment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proveVoteTallyBatch",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "publishMessage",
    values: [
      {
        iv: BigNumberish;
        data: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
      },
      { x: BigNumberish; y: BigNumberish }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "signUp",
    values: [{ x: BigNumberish; y: BigNumberish }, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "signUpDurationSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "signUpGatekeeper",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "signUpTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "stateRoot", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stateRootBeforeProcessing",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "stateTree", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tallyBatchSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalVotes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "treeDepths",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unpackProof",
    values: [
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyPerVOSpentVoiceCredits",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish[][],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifySpentVoiceCredits",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyTallyResult",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish[][],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "voteOptionsMaxLeafIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votingDurationSeconds",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "batchProcessMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcEmptyVoteOptionTreeRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcSignUpDeadline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcVotingDeadline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeEmptyQuinRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeEmptyRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeMerkleRootFromPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "coordinatorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "coordinatorPubKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "coordinatorReset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentMessageBatchIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentPerVOSpentVoiceCreditsCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentQvtBatchNum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentResultsCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentSpentVoiceCreditsCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emptyVoteOptionTreeRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "genBatchUstPublicSignals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "genQvtPublicSignals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMessageTreeRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStateTreeRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasUnprocessedMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasUntalliedStateLeaves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hash11", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hash5", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hashLeftRight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashStateLeaf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashedBlankStateLeaf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialVoiceCreditProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxUsers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "messageBatchSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "messageTree",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "messageTreeMaxLeafIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "numSignUps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "originalCurrentResultsCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "originalSpentVoiceCreditsCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proveVoteTallyBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publishMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "signUp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "signUpDurationSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signUpGatekeeper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signUpTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stateRoot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stateRootBeforeProcessing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stateTree", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tallyBatchSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalVotes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "treeDepths", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unpackProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyPerVOSpentVoiceCredits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifySpentVoiceCredits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyTallyResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteOptionsMaxLeafIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingDurationSeconds",
    data: BytesLike
  ): Result;

  events: {
    "PublishMessage(tuple,tuple)": EventFragment;
    "SignUp(tuple,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PublishMessage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignUp"): EventFragment;
}

export type PublishMessageEvent = TypedEvent<
  [
    [
      BigNumber,
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ]
    ] & {
      iv: BigNumber;
      data: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
    },
    [BigNumber, BigNumber] & { x: BigNumber; y: BigNumber }
  ] & {
    _message: [
      BigNumber,
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ]
    ] & {
      iv: BigNumber;
      data: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
    };
    _encPubKey: [BigNumber, BigNumber] & { x: BigNumber; y: BigNumber };
  }
>;

export type SignUpEvent = TypedEvent<
  [
    [BigNumber, BigNumber] & { x: BigNumber; y: BigNumber },
    BigNumber,
    BigNumber
  ] & {
    _userPubKey: [BigNumber, BigNumber] & { x: BigNumber; y: BigNumber };
    _stateIndex: BigNumber;
    _voiceCreditBalance: BigNumber;
  }
>;

export class MACI extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MACIInterface;

  functions: {
    batchProcessMessage(
      _newStateRoot: BigNumberish,
      _ecdhPubKeys: { x: BigNumberish; y: BigNumberish }[],
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calcEmptyVoteOptionTreeRoot(
      _levels: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcSignUpDeadline(overrides?: CallOverrides): Promise<[BigNumber]>;

    calcVotingDeadline(overrides?: CallOverrides): Promise<[BigNumber]>;

    computeEmptyQuinRoot(
      _treeLevels: BigNumberish,
      _zeroValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    computeEmptyRoot(
      _treeLevels: BigNumberish,
      _zeroValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    computeMerkleRootFromPath(
      _depth: BigNumberish,
      _index: BigNumberish,
      _leaf: BigNumberish,
      _pathElements: BigNumberish[][],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    coordinatorAddress(overrides?: CallOverrides): Promise<[string]>;

    coordinatorPubKey(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { x: BigNumber; y: BigNumber }>;

    coordinatorReset(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentMessageBatchIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentPerVOSpentVoiceCreditsCommitment(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    currentQvtBatchNum(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentResultsCommitment(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentSpentVoiceCreditsCommitment(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    emptyVoteOptionTreeRoot(overrides?: CallOverrides): Promise<[BigNumber]>;

    genBatchUstPublicSignals(
      _newStateRoot: BigNumberish,
      _ecdhPubKeys: { x: BigNumberish; y: BigNumberish }[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    genQvtPublicSignals(
      _intermediateStateRoot: BigNumberish,
      _newResultsCommitment: BigNumberish,
      _newSpentVoiceCreditsCommitment: BigNumberish,
      _newPerVOSpentVoiceCreditsCommitment: BigNumberish,
      _totalVotes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getMessageTreeRoot(overrides?: CallOverrides): Promise<[BigNumber]>;

    getStateTreeRoot(overrides?: CallOverrides): Promise<[BigNumber]>;

    hasUnprocessedMessages(overrides?: CallOverrides): Promise<[boolean]>;

    hasUntalliedStateLeaves(overrides?: CallOverrides): Promise<[boolean]>;

    hash11(
      array: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hash5(
      array: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hashLeftRight(
      _left: BigNumberish,
      _right: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hashMessage(
      _message: {
        iv: BigNumberish;
        data: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
      },
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hashStateLeaf(
      _stateLeaf: {
        pubKey: { x: BigNumberish; y: BigNumberish };
        voteOptionTreeRoot: BigNumberish;
        voiceCreditBalance: BigNumberish;
        nonce: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hashedBlankStateLeaf(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialVoiceCreditProxy(overrides?: CallOverrides): Promise<[string]>;

    maxMessages(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxUsers(overrides?: CallOverrides): Promise<[BigNumber]>;

    messageBatchSize(overrides?: CallOverrides): Promise<[number]>;

    messageTree(overrides?: CallOverrides): Promise<[string]>;

    messageTreeMaxLeafIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    numMessages(overrides?: CallOverrides): Promise<[BigNumber]>;

    numSignUps(overrides?: CallOverrides): Promise<[BigNumber]>;

    originalCurrentResultsCommitment(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    originalSpentVoiceCreditsCommitment(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    proveVoteTallyBatch(
      _intermediateStateRoot: BigNumberish,
      _newResultsCommitment: BigNumberish,
      _newSpentVoiceCreditsCommitment: BigNumberish,
      _newPerVOSpentVoiceCreditsCommitment: BigNumberish,
      _totalVotes: BigNumberish,
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    publishMessage(
      _message: {
        iv: BigNumberish;
        data: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
      },
      _encPubKey: { x: BigNumberish; y: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    signUp(
      _userPubKey: { x: BigNumberish; y: BigNumberish },
      _signUpGatekeeperData: BytesLike,
      _initialVoiceCreditProxyData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    signUpDurationSeconds(overrides?: CallOverrides): Promise<[BigNumber]>;

    signUpGatekeeper(overrides?: CallOverrides): Promise<[string]>;

    signUpTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    stateRoot(overrides?: CallOverrides): Promise<[BigNumber]>;

    stateRootBeforeProcessing(overrides?: CallOverrides): Promise<[BigNumber]>;

    stateTree(overrides?: CallOverrides): Promise<[string]>;

    tallyBatchSize(overrides?: CallOverrides): Promise<[number]>;

    totalVotes(overrides?: CallOverrides): Promise<[BigNumber]>;

    treeDepths(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number] & {
        stateTreeDepth: number;
        messageTreeDepth: number;
        voteOptionTreeDepth: number;
      }
    >;

    unpackProof(
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber],
        [[BigNumber, BigNumber], [BigNumber, BigNumber]],
        [BigNumber, BigNumber]
      ]
    >;

    verifyPerVOSpentVoiceCredits(
      _depth: BigNumberish,
      _index: BigNumberish,
      _leaf: BigNumberish,
      _pathElements: BigNumberish[][],
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    verifySpentVoiceCredits(
      _spent: BigNumberish,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    verifyTallyResult(
      _depth: BigNumberish,
      _index: BigNumberish,
      _leaf: BigNumberish,
      _pathElements: BigNumberish[][],
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    voteOptionsMaxLeafIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    votingDurationSeconds(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  batchProcessMessage(
    _newStateRoot: BigNumberish,
    _ecdhPubKeys: { x: BigNumberish; y: BigNumberish }[],
    _proof: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calcEmptyVoteOptionTreeRoot(
    _levels: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcSignUpDeadline(overrides?: CallOverrides): Promise<BigNumber>;

  calcVotingDeadline(overrides?: CallOverrides): Promise<BigNumber>;

  computeEmptyQuinRoot(
    _treeLevels: BigNumberish,
    _zeroValue: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  computeEmptyRoot(
    _treeLevels: BigNumberish,
    _zeroValue: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  computeMerkleRootFromPath(
    _depth: BigNumberish,
    _index: BigNumberish,
    _leaf: BigNumberish,
    _pathElements: BigNumberish[][],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  coordinatorAddress(overrides?: CallOverrides): Promise<string>;

  coordinatorPubKey(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { x: BigNumber; y: BigNumber }>;

  coordinatorReset(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentMessageBatchIndex(overrides?: CallOverrides): Promise<BigNumber>;

  currentPerVOSpentVoiceCreditsCommitment(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  currentQvtBatchNum(overrides?: CallOverrides): Promise<BigNumber>;

  currentResultsCommitment(overrides?: CallOverrides): Promise<BigNumber>;

  currentSpentVoiceCreditsCommitment(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  emptyVoteOptionTreeRoot(overrides?: CallOverrides): Promise<BigNumber>;

  genBatchUstPublicSignals(
    _newStateRoot: BigNumberish,
    _ecdhPubKeys: { x: BigNumberish; y: BigNumberish }[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  genQvtPublicSignals(
    _intermediateStateRoot: BigNumberish,
    _newResultsCommitment: BigNumberish,
    _newSpentVoiceCreditsCommitment: BigNumberish,
    _newPerVOSpentVoiceCreditsCommitment: BigNumberish,
    _totalVotes: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getMessageTreeRoot(overrides?: CallOverrides): Promise<BigNumber>;

  getStateTreeRoot(overrides?: CallOverrides): Promise<BigNumber>;

  hasUnprocessedMessages(overrides?: CallOverrides): Promise<boolean>;

  hasUntalliedStateLeaves(overrides?: CallOverrides): Promise<boolean>;

  hash11(array: BigNumberish[], overrides?: CallOverrides): Promise<BigNumber>;

  hash5(
    array: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hashLeftRight(
    _left: BigNumberish,
    _right: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hashMessage(
    _message: {
      iv: BigNumberish;
      data: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ];
    },
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hashStateLeaf(
    _stateLeaf: {
      pubKey: { x: BigNumberish; y: BigNumberish };
      voteOptionTreeRoot: BigNumberish;
      voiceCreditBalance: BigNumberish;
      nonce: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hashedBlankStateLeaf(overrides?: CallOverrides): Promise<BigNumber>;

  initialVoiceCreditProxy(overrides?: CallOverrides): Promise<string>;

  maxMessages(overrides?: CallOverrides): Promise<BigNumber>;

  maxUsers(overrides?: CallOverrides): Promise<BigNumber>;

  messageBatchSize(overrides?: CallOverrides): Promise<number>;

  messageTree(overrides?: CallOverrides): Promise<string>;

  messageTreeMaxLeafIndex(overrides?: CallOverrides): Promise<BigNumber>;

  numMessages(overrides?: CallOverrides): Promise<BigNumber>;

  numSignUps(overrides?: CallOverrides): Promise<BigNumber>;

  originalCurrentResultsCommitment(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  originalSpentVoiceCreditsCommitment(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  proveVoteTallyBatch(
    _intermediateStateRoot: BigNumberish,
    _newResultsCommitment: BigNumberish,
    _newSpentVoiceCreditsCommitment: BigNumberish,
    _newPerVOSpentVoiceCreditsCommitment: BigNumberish,
    _totalVotes: BigNumberish,
    _proof: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  publishMessage(
    _message: {
      iv: BigNumberish;
      data: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ];
    },
    _encPubKey: { x: BigNumberish; y: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  signUp(
    _userPubKey: { x: BigNumberish; y: BigNumberish },
    _signUpGatekeeperData: BytesLike,
    _initialVoiceCreditProxyData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  signUpDurationSeconds(overrides?: CallOverrides): Promise<BigNumber>;

  signUpGatekeeper(overrides?: CallOverrides): Promise<string>;

  signUpTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  stateRoot(overrides?: CallOverrides): Promise<BigNumber>;

  stateRootBeforeProcessing(overrides?: CallOverrides): Promise<BigNumber>;

  stateTree(overrides?: CallOverrides): Promise<string>;

  tallyBatchSize(overrides?: CallOverrides): Promise<number>;

  totalVotes(overrides?: CallOverrides): Promise<BigNumber>;

  treeDepths(
    overrides?: CallOverrides
  ): Promise<
    [number, number, number] & {
      stateTreeDepth: number;
      messageTreeDepth: number;
      voteOptionTreeDepth: number;
    }
  >;

  unpackProof(
    _proof: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber, BigNumber],
      [[BigNumber, BigNumber], [BigNumber, BigNumber]],
      [BigNumber, BigNumber]
    ]
  >;

  verifyPerVOSpentVoiceCredits(
    _depth: BigNumberish,
    _index: BigNumberish,
    _leaf: BigNumberish,
    _pathElements: BigNumberish[][],
    _salt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  verifySpentVoiceCredits(
    _spent: BigNumberish,
    _salt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  verifyTallyResult(
    _depth: BigNumberish,
    _index: BigNumberish,
    _leaf: BigNumberish,
    _pathElements: BigNumberish[][],
    _salt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  voteOptionsMaxLeafIndex(overrides?: CallOverrides): Promise<BigNumber>;

  votingDurationSeconds(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    batchProcessMessage(
      _newStateRoot: BigNumberish,
      _ecdhPubKeys: { x: BigNumberish; y: BigNumberish }[],
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    calcEmptyVoteOptionTreeRoot(
      _levels: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcSignUpDeadline(overrides?: CallOverrides): Promise<BigNumber>;

    calcVotingDeadline(overrides?: CallOverrides): Promise<BigNumber>;

    computeEmptyQuinRoot(
      _treeLevels: BigNumberish,
      _zeroValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeEmptyRoot(
      _treeLevels: BigNumberish,
      _zeroValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeMerkleRootFromPath(
      _depth: BigNumberish,
      _index: BigNumberish,
      _leaf: BigNumberish,
      _pathElements: BigNumberish[][],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    coordinatorAddress(overrides?: CallOverrides): Promise<string>;

    coordinatorPubKey(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { x: BigNumber; y: BigNumber }>;

    coordinatorReset(overrides?: CallOverrides): Promise<void>;

    currentMessageBatchIndex(overrides?: CallOverrides): Promise<BigNumber>;

    currentPerVOSpentVoiceCreditsCommitment(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentQvtBatchNum(overrides?: CallOverrides): Promise<BigNumber>;

    currentResultsCommitment(overrides?: CallOverrides): Promise<BigNumber>;

    currentSpentVoiceCreditsCommitment(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emptyVoteOptionTreeRoot(overrides?: CallOverrides): Promise<BigNumber>;

    genBatchUstPublicSignals(
      _newStateRoot: BigNumberish,
      _ecdhPubKeys: { x: BigNumberish; y: BigNumberish }[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    genQvtPublicSignals(
      _intermediateStateRoot: BigNumberish,
      _newResultsCommitment: BigNumberish,
      _newSpentVoiceCreditsCommitment: BigNumberish,
      _newPerVOSpentVoiceCreditsCommitment: BigNumberish,
      _totalVotes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getMessageTreeRoot(overrides?: CallOverrides): Promise<BigNumber>;

    getStateTreeRoot(overrides?: CallOverrides): Promise<BigNumber>;

    hasUnprocessedMessages(overrides?: CallOverrides): Promise<boolean>;

    hasUntalliedStateLeaves(overrides?: CallOverrides): Promise<boolean>;

    hash11(
      array: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hash5(
      array: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashLeftRight(
      _left: BigNumberish,
      _right: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashMessage(
      _message: {
        iv: BigNumberish;
        data: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashStateLeaf(
      _stateLeaf: {
        pubKey: { x: BigNumberish; y: BigNumberish };
        voteOptionTreeRoot: BigNumberish;
        voiceCreditBalance: BigNumberish;
        nonce: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashedBlankStateLeaf(overrides?: CallOverrides): Promise<BigNumber>;

    initialVoiceCreditProxy(overrides?: CallOverrides): Promise<string>;

    maxMessages(overrides?: CallOverrides): Promise<BigNumber>;

    maxUsers(overrides?: CallOverrides): Promise<BigNumber>;

    messageBatchSize(overrides?: CallOverrides): Promise<number>;

    messageTree(overrides?: CallOverrides): Promise<string>;

    messageTreeMaxLeafIndex(overrides?: CallOverrides): Promise<BigNumber>;

    numMessages(overrides?: CallOverrides): Promise<BigNumber>;

    numSignUps(overrides?: CallOverrides): Promise<BigNumber>;

    originalCurrentResultsCommitment(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    originalSpentVoiceCreditsCommitment(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proveVoteTallyBatch(
      _intermediateStateRoot: BigNumberish,
      _newResultsCommitment: BigNumberish,
      _newSpentVoiceCreditsCommitment: BigNumberish,
      _newPerVOSpentVoiceCreditsCommitment: BigNumberish,
      _totalVotes: BigNumberish,
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    publishMessage(
      _message: {
        iv: BigNumberish;
        data: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
      },
      _encPubKey: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    signUp(
      _userPubKey: { x: BigNumberish; y: BigNumberish },
      _signUpGatekeeperData: BytesLike,
      _initialVoiceCreditProxyData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    signUpDurationSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    signUpGatekeeper(overrides?: CallOverrides): Promise<string>;

    signUpTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    stateRoot(overrides?: CallOverrides): Promise<BigNumber>;

    stateRootBeforeProcessing(overrides?: CallOverrides): Promise<BigNumber>;

    stateTree(overrides?: CallOverrides): Promise<string>;

    tallyBatchSize(overrides?: CallOverrides): Promise<number>;

    totalVotes(overrides?: CallOverrides): Promise<BigNumber>;

    treeDepths(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number] & {
        stateTreeDepth: number;
        messageTreeDepth: number;
        voteOptionTreeDepth: number;
      }
    >;

    unpackProof(
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber],
        [[BigNumber, BigNumber], [BigNumber, BigNumber]],
        [BigNumber, BigNumber]
      ]
    >;

    verifyPerVOSpentVoiceCredits(
      _depth: BigNumberish,
      _index: BigNumberish,
      _leaf: BigNumberish,
      _pathElements: BigNumberish[][],
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    verifySpentVoiceCredits(
      _spent: BigNumberish,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    verifyTallyResult(
      _depth: BigNumberish,
      _index: BigNumberish,
      _leaf: BigNumberish,
      _pathElements: BigNumberish[][],
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    voteOptionsMaxLeafIndex(overrides?: CallOverrides): Promise<BigNumber>;

    votingDurationSeconds(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "PublishMessage(tuple,tuple)"(
      _message?: null,
      _encPubKey?: null
    ): TypedEventFilter<
      [
        [
          BigNumber,
          [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ]
        ] & {
          iv: BigNumber;
          data: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ];
        },
        [BigNumber, BigNumber] & { x: BigNumber; y: BigNumber }
      ],
      {
        _message: [
          BigNumber,
          [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ]
        ] & {
          iv: BigNumber;
          data: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ];
        };
        _encPubKey: [BigNumber, BigNumber] & { x: BigNumber; y: BigNumber };
      }
    >;

    PublishMessage(
      _message?: null,
      _encPubKey?: null
    ): TypedEventFilter<
      [
        [
          BigNumber,
          [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ]
        ] & {
          iv: BigNumber;
          data: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ];
        },
        [BigNumber, BigNumber] & { x: BigNumber; y: BigNumber }
      ],
      {
        _message: [
          BigNumber,
          [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ]
        ] & {
          iv: BigNumber;
          data: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ];
        };
        _encPubKey: [BigNumber, BigNumber] & { x: BigNumber; y: BigNumber };
      }
    >;

    "SignUp(tuple,uint256,uint256)"(
      _userPubKey?: null,
      _stateIndex?: null,
      _voiceCreditBalance?: null
    ): TypedEventFilter<
      [
        [BigNumber, BigNumber] & { x: BigNumber; y: BigNumber },
        BigNumber,
        BigNumber
      ],
      {
        _userPubKey: [BigNumber, BigNumber] & { x: BigNumber; y: BigNumber };
        _stateIndex: BigNumber;
        _voiceCreditBalance: BigNumber;
      }
    >;

    SignUp(
      _userPubKey?: null,
      _stateIndex?: null,
      _voiceCreditBalance?: null
    ): TypedEventFilter<
      [
        [BigNumber, BigNumber] & { x: BigNumber; y: BigNumber },
        BigNumber,
        BigNumber
      ],
      {
        _userPubKey: [BigNumber, BigNumber] & { x: BigNumber; y: BigNumber };
        _stateIndex: BigNumber;
        _voiceCreditBalance: BigNumber;
      }
    >;
  };

  estimateGas: {
    batchProcessMessage(
      _newStateRoot: BigNumberish,
      _ecdhPubKeys: { x: BigNumberish; y: BigNumberish }[],
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calcEmptyVoteOptionTreeRoot(
      _levels: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcSignUpDeadline(overrides?: CallOverrides): Promise<BigNumber>;

    calcVotingDeadline(overrides?: CallOverrides): Promise<BigNumber>;

    computeEmptyQuinRoot(
      _treeLevels: BigNumberish,
      _zeroValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeEmptyRoot(
      _treeLevels: BigNumberish,
      _zeroValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeMerkleRootFromPath(
      _depth: BigNumberish,
      _index: BigNumberish,
      _leaf: BigNumberish,
      _pathElements: BigNumberish[][],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    coordinatorAddress(overrides?: CallOverrides): Promise<BigNumber>;

    coordinatorPubKey(overrides?: CallOverrides): Promise<BigNumber>;

    coordinatorReset(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentMessageBatchIndex(overrides?: CallOverrides): Promise<BigNumber>;

    currentPerVOSpentVoiceCreditsCommitment(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentQvtBatchNum(overrides?: CallOverrides): Promise<BigNumber>;

    currentResultsCommitment(overrides?: CallOverrides): Promise<BigNumber>;

    currentSpentVoiceCreditsCommitment(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emptyVoteOptionTreeRoot(overrides?: CallOverrides): Promise<BigNumber>;

    genBatchUstPublicSignals(
      _newStateRoot: BigNumberish,
      _ecdhPubKeys: { x: BigNumberish; y: BigNumberish }[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    genQvtPublicSignals(
      _intermediateStateRoot: BigNumberish,
      _newResultsCommitment: BigNumberish,
      _newSpentVoiceCreditsCommitment: BigNumberish,
      _newPerVOSpentVoiceCreditsCommitment: BigNumberish,
      _totalVotes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMessageTreeRoot(overrides?: CallOverrides): Promise<BigNumber>;

    getStateTreeRoot(overrides?: CallOverrides): Promise<BigNumber>;

    hasUnprocessedMessages(overrides?: CallOverrides): Promise<BigNumber>;

    hasUntalliedStateLeaves(overrides?: CallOverrides): Promise<BigNumber>;

    hash11(
      array: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hash5(
      array: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashLeftRight(
      _left: BigNumberish,
      _right: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashMessage(
      _message: {
        iv: BigNumberish;
        data: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashStateLeaf(
      _stateLeaf: {
        pubKey: { x: BigNumberish; y: BigNumberish };
        voteOptionTreeRoot: BigNumberish;
        voiceCreditBalance: BigNumberish;
        nonce: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashedBlankStateLeaf(overrides?: CallOverrides): Promise<BigNumber>;

    initialVoiceCreditProxy(overrides?: CallOverrides): Promise<BigNumber>;

    maxMessages(overrides?: CallOverrides): Promise<BigNumber>;

    maxUsers(overrides?: CallOverrides): Promise<BigNumber>;

    messageBatchSize(overrides?: CallOverrides): Promise<BigNumber>;

    messageTree(overrides?: CallOverrides): Promise<BigNumber>;

    messageTreeMaxLeafIndex(overrides?: CallOverrides): Promise<BigNumber>;

    numMessages(overrides?: CallOverrides): Promise<BigNumber>;

    numSignUps(overrides?: CallOverrides): Promise<BigNumber>;

    originalCurrentResultsCommitment(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    originalSpentVoiceCreditsCommitment(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proveVoteTallyBatch(
      _intermediateStateRoot: BigNumberish,
      _newResultsCommitment: BigNumberish,
      _newSpentVoiceCreditsCommitment: BigNumberish,
      _newPerVOSpentVoiceCreditsCommitment: BigNumberish,
      _totalVotes: BigNumberish,
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    publishMessage(
      _message: {
        iv: BigNumberish;
        data: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
      },
      _encPubKey: { x: BigNumberish; y: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    signUp(
      _userPubKey: { x: BigNumberish; y: BigNumberish },
      _signUpGatekeeperData: BytesLike,
      _initialVoiceCreditProxyData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    signUpDurationSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    signUpGatekeeper(overrides?: CallOverrides): Promise<BigNumber>;

    signUpTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    stateRoot(overrides?: CallOverrides): Promise<BigNumber>;

    stateRootBeforeProcessing(overrides?: CallOverrides): Promise<BigNumber>;

    stateTree(overrides?: CallOverrides): Promise<BigNumber>;

    tallyBatchSize(overrides?: CallOverrides): Promise<BigNumber>;

    totalVotes(overrides?: CallOverrides): Promise<BigNumber>;

    treeDepths(overrides?: CallOverrides): Promise<BigNumber>;

    unpackProof(
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyPerVOSpentVoiceCredits(
      _depth: BigNumberish,
      _index: BigNumberish,
      _leaf: BigNumberish,
      _pathElements: BigNumberish[][],
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifySpentVoiceCredits(
      _spent: BigNumberish,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyTallyResult(
      _depth: BigNumberish,
      _index: BigNumberish,
      _leaf: BigNumberish,
      _pathElements: BigNumberish[][],
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    voteOptionsMaxLeafIndex(overrides?: CallOverrides): Promise<BigNumber>;

    votingDurationSeconds(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    batchProcessMessage(
      _newStateRoot: BigNumberish,
      _ecdhPubKeys: { x: BigNumberish; y: BigNumberish }[],
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calcEmptyVoteOptionTreeRoot(
      _levels: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcSignUpDeadline(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcVotingDeadline(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeEmptyQuinRoot(
      _treeLevels: BigNumberish,
      _zeroValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeEmptyRoot(
      _treeLevels: BigNumberish,
      _zeroValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeMerkleRootFromPath(
      _depth: BigNumberish,
      _index: BigNumberish,
      _leaf: BigNumberish,
      _pathElements: BigNumberish[][],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    coordinatorAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    coordinatorPubKey(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    coordinatorReset(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentMessageBatchIndex(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentPerVOSpentVoiceCreditsCommitment(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentQvtBatchNum(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentResultsCommitment(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentSpentVoiceCreditsCommitment(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emptyVoteOptionTreeRoot(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    genBatchUstPublicSignals(
      _newStateRoot: BigNumberish,
      _ecdhPubKeys: { x: BigNumberish; y: BigNumberish }[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    genQvtPublicSignals(
      _intermediateStateRoot: BigNumberish,
      _newResultsCommitment: BigNumberish,
      _newSpentVoiceCreditsCommitment: BigNumberish,
      _newPerVOSpentVoiceCreditsCommitment: BigNumberish,
      _totalVotes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMessageTreeRoot(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStateTreeRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasUnprocessedMessages(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasUntalliedStateLeaves(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hash11(
      array: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hash5(
      array: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashLeftRight(
      _left: BigNumberish,
      _right: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashMessage(
      _message: {
        iv: BigNumberish;
        data: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashStateLeaf(
      _stateLeaf: {
        pubKey: { x: BigNumberish; y: BigNumberish };
        voteOptionTreeRoot: BigNumberish;
        voiceCreditBalance: BigNumberish;
        nonce: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashedBlankStateLeaf(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialVoiceCreditProxy(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxMessages(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxUsers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    messageBatchSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    messageTree(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    messageTreeMaxLeafIndex(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numMessages(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numSignUps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    originalCurrentResultsCommitment(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    originalSpentVoiceCreditsCommitment(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proveVoteTallyBatch(
      _intermediateStateRoot: BigNumberish,
      _newResultsCommitment: BigNumberish,
      _newSpentVoiceCreditsCommitment: BigNumberish,
      _newPerVOSpentVoiceCreditsCommitment: BigNumberish,
      _totalVotes: BigNumberish,
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    publishMessage(
      _message: {
        iv: BigNumberish;
        data: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
      },
      _encPubKey: { x: BigNumberish; y: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    signUp(
      _userPubKey: { x: BigNumberish; y: BigNumberish },
      _signUpGatekeeperData: BytesLike,
      _initialVoiceCreditProxyData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    signUpDurationSeconds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    signUpGatekeeper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    signUpTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stateRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stateRootBeforeProcessing(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stateTree(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tallyBatchSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalVotes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    treeDepths(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpackProof(
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyPerVOSpentVoiceCredits(
      _depth: BigNumberish,
      _index: BigNumberish,
      _leaf: BigNumberish,
      _pathElements: BigNumberish[][],
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifySpentVoiceCredits(
      _spent: BigNumberish,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyTallyResult(
      _depth: BigNumberish,
      _index: BigNumberish,
      _leaf: BigNumberish,
      _pathElements: BigNumberish[][],
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    voteOptionsMaxLeafIndex(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votingDurationSeconds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
