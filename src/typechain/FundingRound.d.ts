/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface FundingRoundInterface extends ethers.utils.Interface {
  functions: {
    "cancel()": FunctionFragment;
    "claimFunds(uint256,uint256,uint256[][],uint256,uint256,uint256[][],uint256)": FunctionFragment;
    "contribute(tuple,uint256)": FunctionFragment;
    "contributorCount()": FunctionFragment;
    "coordinator()": FunctionFragment;
    "finalize(uint256,uint256)": FunctionFragment;
    "getAllocatedAmount(uint256,uint256)": FunctionFragment;
    "getVoiceCredits(address,bytes)": FunctionFragment;
    "isCancelled()": FunctionFragment;
    "isFinalized()": FunctionFragment;
    "maci()": FunctionFragment;
    "matchingPoolSize()": FunctionFragment;
    "nativeToken()": FunctionFragment;
    "owner()": FunctionFragment;
    "publishTallyHash(string)": FunctionFragment;
    "recipientRegistry()": FunctionFragment;
    "register(address,bytes)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setMaci(address)": FunctionFragment;
    "submitMessageBatch(tuple[],tuple[])": FunctionFragment;
    "tallyHash()": FunctionFragment;
    "totalSpent()": FunctionFragment;
    "totalVotes()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "userRegistry()": FunctionFragment;
    "voiceCreditFactor()": FunctionFragment;
    "withdrawContribution()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "cancel", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimFunds",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish[][],
      BigNumberish,
      BigNumberish,
      BigNumberish[][],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "contribute",
    values: [{ x: BigNumberish; y: BigNumberish }, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contributorCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "coordinator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "finalize",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllocatedAmount",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoiceCredits",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isCancelled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isFinalized",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maci", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "matchingPoolSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nativeToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "publishTallyHash",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "recipientRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setMaci", values: [string]): string;
  encodeFunctionData(
    functionFragment: "submitMessageBatch",
    values: [
      {
        iv: BigNumberish;
        data: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
      }[],
      { x: BigNumberish; y: BigNumberish }[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "tallyHash", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSpent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalVotes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "voiceCreditFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawContribution",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimFunds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "contribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contributorCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "coordinator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "finalize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllocatedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoiceCredits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCancelled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFinalized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maci", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "matchingPoolSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nativeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "publishTallyHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recipientRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMaci", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitMessageBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tallyHash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalSpent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalVotes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voiceCreditFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawContribution",
    data: BytesLike
  ): Result;

  events: {
    "Contribution(address,uint256)": EventFragment;
    "ContributionWithdrawn(address)": EventFragment;
    "FundsClaimed(uint256,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "TallyPublished(string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Contribution"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContributionWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TallyPublished"): EventFragment;
}

export type ContributionEvent = TypedEvent<
  [string, BigNumber] & { _sender: string; _amount: BigNumber }
>;

export type ContributionWithdrawnEvent = TypedEvent<
  [string] & { _contributor: string }
>;

export type FundsClaimedEvent = TypedEvent<
  [BigNumber, string, BigNumber] & {
    _voteOptionIndex: BigNumber;
    _recipient: string;
    _amount: BigNumber;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type TallyPublishedEvent = TypedEvent<[string] & { _tallyHash: string }>;

export class FundingRound extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: FundingRoundInterface;

  functions: {
    cancel(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimFunds(
      _voteOptionIndex: BigNumberish,
      _tallyResult: BigNumberish,
      _tallyResultProof: BigNumberish[][],
      _tallyResultSalt: BigNumberish,
      _spent: BigNumberish,
      _spentProof: BigNumberish[][],
      _spentSalt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    contribute(
      pubKey: { x: BigNumberish; y: BigNumberish },
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    contributorCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    coordinator(overrides?: CallOverrides): Promise<[string]>;

    finalize(
      _totalSpent: BigNumberish,
      _totalSpentSalt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAllocatedAmount(
      _tallyResult: BigNumberish,
      _spent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getVoiceCredits(
      arg0: string,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isCancelled(overrides?: CallOverrides): Promise<[boolean]>;

    isFinalized(overrides?: CallOverrides): Promise<[boolean]>;

    maci(overrides?: CallOverrides): Promise<[string]>;

    matchingPoolSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    nativeToken(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    publishTallyHash(
      _tallyHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    recipientRegistry(overrides?: CallOverrides): Promise<[string]>;

    register(
      arg0: string,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaci(
      _maci: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitMessageBatch(
      _messages: {
        iv: BigNumberish;
        data: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
      }[],
      _encPubKeys: { x: BigNumberish; y: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tallyHash(overrides?: CallOverrides): Promise<[string]>;

    totalSpent(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalVotes(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userRegistry(overrides?: CallOverrides): Promise<[string]>;

    voiceCreditFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawContribution(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  cancel(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimFunds(
    _voteOptionIndex: BigNumberish,
    _tallyResult: BigNumberish,
    _tallyResultProof: BigNumberish[][],
    _tallyResultSalt: BigNumberish,
    _spent: BigNumberish,
    _spentProof: BigNumberish[][],
    _spentSalt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  contribute(
    pubKey: { x: BigNumberish; y: BigNumberish },
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  contributorCount(overrides?: CallOverrides): Promise<BigNumber>;

  coordinator(overrides?: CallOverrides): Promise<string>;

  finalize(
    _totalSpent: BigNumberish,
    _totalSpentSalt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAllocatedAmount(
    _tallyResult: BigNumberish,
    _spent: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVoiceCredits(
    arg0: string,
    _data: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isCancelled(overrides?: CallOverrides): Promise<boolean>;

  isFinalized(overrides?: CallOverrides): Promise<boolean>;

  maci(overrides?: CallOverrides): Promise<string>;

  matchingPoolSize(overrides?: CallOverrides): Promise<BigNumber>;

  nativeToken(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  publishTallyHash(
    _tallyHash: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  recipientRegistry(overrides?: CallOverrides): Promise<string>;

  register(
    arg0: string,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaci(
    _maci: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitMessageBatch(
    _messages: {
      iv: BigNumberish;
      data: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ];
    }[],
    _encPubKeys: { x: BigNumberish; y: BigNumberish }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tallyHash(overrides?: CallOverrides): Promise<string>;

  totalSpent(overrides?: CallOverrides): Promise<BigNumber>;

  totalVotes(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userRegistry(overrides?: CallOverrides): Promise<string>;

  voiceCreditFactor(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawContribution(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    cancel(overrides?: CallOverrides): Promise<void>;

    claimFunds(
      _voteOptionIndex: BigNumberish,
      _tallyResult: BigNumberish,
      _tallyResultProof: BigNumberish[][],
      _tallyResultSalt: BigNumberish,
      _spent: BigNumberish,
      _spentProof: BigNumberish[][],
      _spentSalt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    contribute(
      pubKey: { x: BigNumberish; y: BigNumberish },
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    contributorCount(overrides?: CallOverrides): Promise<BigNumber>;

    coordinator(overrides?: CallOverrides): Promise<string>;

    finalize(
      _totalSpent: BigNumberish,
      _totalSpentSalt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllocatedAmount(
      _tallyResult: BigNumberish,
      _spent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoiceCredits(
      arg0: string,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isCancelled(overrides?: CallOverrides): Promise<boolean>;

    isFinalized(overrides?: CallOverrides): Promise<boolean>;

    maci(overrides?: CallOverrides): Promise<string>;

    matchingPoolSize(overrides?: CallOverrides): Promise<BigNumber>;

    nativeToken(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    publishTallyHash(
      _tallyHash: string,
      overrides?: CallOverrides
    ): Promise<void>;

    recipientRegistry(overrides?: CallOverrides): Promise<string>;

    register(
      arg0: string,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setMaci(_maci: string, overrides?: CallOverrides): Promise<void>;

    submitMessageBatch(
      _messages: {
        iv: BigNumberish;
        data: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
      }[],
      _encPubKeys: { x: BigNumberish; y: BigNumberish }[],
      overrides?: CallOverrides
    ): Promise<void>;

    tallyHash(overrides?: CallOverrides): Promise<string>;

    totalSpent(overrides?: CallOverrides): Promise<BigNumber>;

    totalVotes(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    userRegistry(overrides?: CallOverrides): Promise<string>;

    voiceCreditFactor(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawContribution(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Contribution(address,uint256)"(
      _sender?: string | null,
      _amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _sender: string; _amount: BigNumber }
    >;

    Contribution(
      _sender?: string | null,
      _amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _sender: string; _amount: BigNumber }
    >;

    "ContributionWithdrawn(address)"(
      _contributor?: string | null
    ): TypedEventFilter<[string], { _contributor: string }>;

    ContributionWithdrawn(
      _contributor?: string | null
    ): TypedEventFilter<[string], { _contributor: string }>;

    "FundsClaimed(uint256,address,uint256)"(
      _voteOptionIndex?: BigNumberish | null,
      _recipient?: string | null,
      _amount?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { _voteOptionIndex: BigNumber; _recipient: string; _amount: BigNumber }
    >;

    FundsClaimed(
      _voteOptionIndex?: BigNumberish | null,
      _recipient?: string | null,
      _amount?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { _voteOptionIndex: BigNumber; _recipient: string; _amount: BigNumber }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "TallyPublished(string)"(
      _tallyHash?: null
    ): TypedEventFilter<[string], { _tallyHash: string }>;

    TallyPublished(
      _tallyHash?: null
    ): TypedEventFilter<[string], { _tallyHash: string }>;
  };

  estimateGas: {
    cancel(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimFunds(
      _voteOptionIndex: BigNumberish,
      _tallyResult: BigNumberish,
      _tallyResultProof: BigNumberish[][],
      _tallyResultSalt: BigNumberish,
      _spent: BigNumberish,
      _spentProof: BigNumberish[][],
      _spentSalt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    contribute(
      pubKey: { x: BigNumberish; y: BigNumberish },
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    contributorCount(overrides?: CallOverrides): Promise<BigNumber>;

    coordinator(overrides?: CallOverrides): Promise<BigNumber>;

    finalize(
      _totalSpent: BigNumberish,
      _totalSpentSalt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAllocatedAmount(
      _tallyResult: BigNumberish,
      _spent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoiceCredits(
      arg0: string,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isCancelled(overrides?: CallOverrides): Promise<BigNumber>;

    isFinalized(overrides?: CallOverrides): Promise<BigNumber>;

    maci(overrides?: CallOverrides): Promise<BigNumber>;

    matchingPoolSize(overrides?: CallOverrides): Promise<BigNumber>;

    nativeToken(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    publishTallyHash(
      _tallyHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    recipientRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    register(
      arg0: string,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaci(
      _maci: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitMessageBatch(
      _messages: {
        iv: BigNumberish;
        data: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
      }[],
      _encPubKeys: { x: BigNumberish; y: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tallyHash(overrides?: CallOverrides): Promise<BigNumber>;

    totalSpent(overrides?: CallOverrides): Promise<BigNumber>;

    totalVotes(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    voiceCreditFactor(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawContribution(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cancel(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimFunds(
      _voteOptionIndex: BigNumberish,
      _tallyResult: BigNumberish,
      _tallyResultProof: BigNumberish[][],
      _tallyResultSalt: BigNumberish,
      _spent: BigNumberish,
      _spentProof: BigNumberish[][],
      _spentSalt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    contribute(
      pubKey: { x: BigNumberish; y: BigNumberish },
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    contributorCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    coordinator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finalize(
      _totalSpent: BigNumberish,
      _totalSpentSalt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAllocatedAmount(
      _tallyResult: BigNumberish,
      _spent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVoiceCredits(
      arg0: string,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isCancelled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isFinalized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maci(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    matchingPoolSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nativeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    publishTallyHash(
      _tallyHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    recipientRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    register(
      arg0: string,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaci(
      _maci: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitMessageBatch(
      _messages: {
        iv: BigNumberish;
        data: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
      }[],
      _encPubKeys: { x: BigNumberish; y: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tallyHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSpent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalVotes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    voiceCreditFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawContribution(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
